
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080013d4  080013d4  000113d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f8  080013f8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080013f8  080013f8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f8  080013f8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  08001408  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001408  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001342  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000927  00000000  00000000  000213b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000290  00000000  00000000  00021ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001cd  00000000  00000000  00021f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001bc3  00000000  00000000  0002213d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c84  00000000  00000000  00023d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000569a  00000000  00000000  00026984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008d0  00000000  00000000  0002c020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0002c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	080013bc 	.word	0x080013bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	080013bc 	.word	0x080013bc

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <_delay_ms>:
#include "std_typo.h"
#include "Delay.h"

void _delay_ms(u32 Value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 count=(u32)(float)(Value-TM)/T1;
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff fe31 	bl	80002dc <__aeabi_ui2f>
 800067a:	4603      	mov	r3, r0
 800067c:	4913      	ldr	r1, [pc, #76]	; (80006cc <_delay_ms+0x60>)
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fd7a 	bl	8000178 <__aeabi_fsub>
 8000684:	4603      	mov	r3, r0
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ffd0 	bl	800062c <__aeabi_f2uiz>
 800068c:	4603      	mov	r3, r0
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fe24 	bl	80002dc <__aeabi_ui2f>
 8000694:	4603      	mov	r3, r0
 8000696:	490e      	ldr	r1, [pc, #56]	; (80006d0 <_delay_ms+0x64>)
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff2b 	bl	80004f4 <__aeabi_fdiv>
 800069e:	4603      	mov	r3, r0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ffc3 	bl	800062c <__aeabi_f2uiz>
 80006a6:	4603      	mov	r3, r0
 80006a8:	60bb      	str	r3, [r7, #8]
	
	for(i=0;i<count;i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e003      	b.n	80006b8 <_delay_ms+0x4c>
	{
		
		asm("NOP");
 80006b0:	bf00      	nop
	for(i=0;i<count;i++)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3f7      	bcc.n	80006b0 <_delay_ms+0x44>
		
	}
	
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	3f225604 	.word	0x3f225604
 80006d0:	3bb0e7ff 	.word	0x3bb0e7ff

080006d4 <DIO_voidSetPinDirection>:
#include "BitMath.h"
#include "std_typo.h"
#include "GPIO_private.h"
#include "GPIO_interface.h"

void DIO_voidSetPinDirection(u8 port, u8 pin, u8 Direction){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	460b      	mov	r3, r1
 80006e0:	71bb      	strb	r3, [r7, #6]
 80006e2:	4613      	mov	r3, r2
 80006e4:	717b      	strb	r3, [r7, #5]
	switch(port){
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	f000 810d 	beq.w	8000908 <DIO_voidSetPinDirection+0x234>
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	f300 8196 	bgt.w	8000a20 <DIO_voidSetPinDirection+0x34c>
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d003      	beq.n	8000700 <DIO_voidSetPinDirection+0x2c>
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	f000 8083 	beq.w	8000804 <DIO_voidSetPinDirection+0x130>
			CLR_BIT(GPIOC_CRH, ((pin * 4) - 3));
			GPIOC_CRH |= (Direction << (4 * (pin - 8)));
		}
		break;
	}
}
 80006fe:	e18f      	b.n	8000a20 <DIO_voidSetPinDirection+0x34c>
		if(pin >= 0 && pin < 8){
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	2b07      	cmp	r3, #7
 8000704:	d83e      	bhi.n	8000784 <DIO_voidSetPinDirection+0xb0>
			CLR_BIT(GPIOA_CRL, (pin * 4));
 8000706:	4ba1      	ldr	r3, [pc, #644]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	79ba      	ldrb	r2, [r7, #6]
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	2101      	movs	r1, #1
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	43d2      	mvns	r2, r2
 8000716:	4611      	mov	r1, r2
 8000718:	4a9c      	ldr	r2, [pc, #624]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 800071a:	400b      	ands	r3, r1
 800071c:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOA_CRL, ((pin * 4) - 1));
 800071e:	4b9b      	ldr	r3, [pc, #620]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	3a01      	subs	r2, #1
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	43d2      	mvns	r2, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a96      	ldr	r2, [pc, #600]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 8000734:	400b      	ands	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOA_CRL, ((pin * 4) - 2));
 8000738:	4b94      	ldr	r3, [pc, #592]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	0092      	lsls	r2, r2, #2
 8000740:	3a02      	subs	r2, #2
 8000742:	2101      	movs	r1, #1
 8000744:	fa01 f202 	lsl.w	r2, r1, r2
 8000748:	43d2      	mvns	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4a8f      	ldr	r2, [pc, #572]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 800074e:	400b      	ands	r3, r1
 8000750:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOA_CRL, ((pin * 4) - 3));
 8000752:	4b8e      	ldr	r3, [pc, #568]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	79ba      	ldrb	r2, [r7, #6]
 8000758:	0092      	lsls	r2, r2, #2
 800075a:	3a03      	subs	r2, #3
 800075c:	2101      	movs	r1, #1
 800075e:	fa01 f202 	lsl.w	r2, r1, r2
 8000762:	43d2      	mvns	r2, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a89      	ldr	r2, [pc, #548]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 8000768:	400b      	ands	r3, r1
 800076a:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |= (Direction << (4 * pin));
 800076c:	4b87      	ldr	r3, [pc, #540]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	7979      	ldrb	r1, [r7, #5]
 8000772:	79ba      	ldrb	r2, [r7, #6]
 8000774:	0092      	lsls	r2, r2, #2
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	4611      	mov	r1, r2
 800077c:	4a83      	ldr	r2, [pc, #524]	; (800098c <DIO_voidSetPinDirection+0x2b8>)
 800077e:	430b      	orrs	r3, r1
 8000780:	6013      	str	r3, [r2, #0]
		break;
 8000782:	e14d      	b.n	8000a20 <DIO_voidSetPinDirection+0x34c>
			CLR_BIT(GPIOA_CRH, (pin * 4));
 8000784:	4b82      	ldr	r3, [pc, #520]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	79ba      	ldrb	r2, [r7, #6]
 800078a:	0092      	lsls	r2, r2, #2
 800078c:	2101      	movs	r1, #1
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	43d2      	mvns	r2, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a7e      	ldr	r2, [pc, #504]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 8000798:	400b      	ands	r3, r1
 800079a:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOA_CRH, ((pin * 4) - 1));
 800079c:	4b7c      	ldr	r3, [pc, #496]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	79ba      	ldrb	r2, [r7, #6]
 80007a2:	0092      	lsls	r2, r2, #2
 80007a4:	3a01      	subs	r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	43d2      	mvns	r2, r2
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a77      	ldr	r2, [pc, #476]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 80007b2:	400b      	ands	r3, r1
 80007b4:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOA_CRH, ((pin * 4) - 2));
 80007b6:	4b76      	ldr	r3, [pc, #472]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	79ba      	ldrb	r2, [r7, #6]
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	3a02      	subs	r2, #2
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	43d2      	mvns	r2, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a71      	ldr	r2, [pc, #452]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 80007cc:	400b      	ands	r3, r1
 80007ce:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOA_CRH, ((pin * 4) - 3));
 80007d0:	4b6f      	ldr	r3, [pc, #444]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	0092      	lsls	r2, r2, #2
 80007d8:	3a03      	subs	r2, #3
 80007da:	2101      	movs	r1, #1
 80007dc:	fa01 f202 	lsl.w	r2, r1, r2
 80007e0:	43d2      	mvns	r2, r2
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a6a      	ldr	r2, [pc, #424]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 80007e6:	400b      	ands	r3, r1
 80007e8:	6013      	str	r3, [r2, #0]
			GPIOA_CRH|= (Direction << (4 * (pin - 8)));
 80007ea:	4b69      	ldr	r3, [pc, #420]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	7979      	ldrb	r1, [r7, #5]
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	3a08      	subs	r2, #8
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a64      	ldr	r2, [pc, #400]	; (8000990 <DIO_voidSetPinDirection+0x2bc>)
 80007fe:	430b      	orrs	r3, r1
 8000800:	6013      	str	r3, [r2, #0]
		break;
 8000802:	e10d      	b.n	8000a20 <DIO_voidSetPinDirection+0x34c>
		if(pin >= 0 && pin < 8){
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d83e      	bhi.n	8000888 <DIO_voidSetPinDirection+0x1b4>
			CLR_BIT(GPIOB_CRL, (pin * 4));
 800080a:	4b62      	ldr	r3, [pc, #392]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	79ba      	ldrb	r2, [r7, #6]
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	2101      	movs	r1, #1
 8000814:	fa01 f202 	lsl.w	r2, r1, r2
 8000818:	43d2      	mvns	r2, r2
 800081a:	4611      	mov	r1, r2
 800081c:	4a5d      	ldr	r2, [pc, #372]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 800081e:	400b      	ands	r3, r1
 8000820:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOB_CRL, ((pin * 4) - 1));
 8000822:	4b5c      	ldr	r3, [pc, #368]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	79ba      	ldrb	r2, [r7, #6]
 8000828:	0092      	lsls	r2, r2, #2
 800082a:	3a01      	subs	r2, #1
 800082c:	2101      	movs	r1, #1
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	43d2      	mvns	r2, r2
 8000834:	4611      	mov	r1, r2
 8000836:	4a57      	ldr	r2, [pc, #348]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 8000838:	400b      	ands	r3, r1
 800083a:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOB_CRL, ((pin * 4) - 2));
 800083c:	4b55      	ldr	r3, [pc, #340]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	79ba      	ldrb	r2, [r7, #6]
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	3a02      	subs	r2, #2
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	43d2      	mvns	r2, r2
 800084e:	4611      	mov	r1, r2
 8000850:	4a50      	ldr	r2, [pc, #320]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 8000852:	400b      	ands	r3, r1
 8000854:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOB_CRL, ((pin * 4) - 3));
 8000856:	4b4f      	ldr	r3, [pc, #316]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	79ba      	ldrb	r2, [r7, #6]
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	3a03      	subs	r2, #3
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	43d2      	mvns	r2, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a4a      	ldr	r2, [pc, #296]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 800086c:	400b      	ands	r3, r1
 800086e:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |= (Direction << (4 * pin));
 8000870:	4b48      	ldr	r3, [pc, #288]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	7979      	ldrb	r1, [r7, #5]
 8000876:	79ba      	ldrb	r2, [r7, #6]
 8000878:	0092      	lsls	r2, r2, #2
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a44      	ldr	r2, [pc, #272]	; (8000994 <DIO_voidSetPinDirection+0x2c0>)
 8000882:	430b      	orrs	r3, r1
 8000884:	6013      	str	r3, [r2, #0]
		break;
 8000886:	e0cb      	b.n	8000a20 <DIO_voidSetPinDirection+0x34c>
			CLR_BIT(GPIOB_CRH, (pin * 4));
 8000888:	4b43      	ldr	r3, [pc, #268]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	79ba      	ldrb	r2, [r7, #6]
 800088e:	0092      	lsls	r2, r2, #2
 8000890:	2101      	movs	r1, #1
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	43d2      	mvns	r2, r2
 8000898:	4611      	mov	r1, r2
 800089a:	4a3f      	ldr	r2, [pc, #252]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 800089c:	400b      	ands	r3, r1
 800089e:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOB_CRH, ((pin * 4) - 1));
 80008a0:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	79ba      	ldrb	r2, [r7, #6]
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	3a01      	subs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	fa01 f202 	lsl.w	r2, r1, r2
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	4611      	mov	r1, r2
 80008b4:	4a38      	ldr	r2, [pc, #224]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 80008b6:	400b      	ands	r3, r1
 80008b8:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOB_CRH, ((pin * 4) - 2));
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	79ba      	ldrb	r2, [r7, #6]
 80008c0:	0092      	lsls	r2, r2, #2
 80008c2:	3a02      	subs	r2, #2
 80008c4:	2101      	movs	r1, #1
 80008c6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ca:	43d2      	mvns	r2, r2
 80008cc:	4611      	mov	r1, r2
 80008ce:	4a32      	ldr	r2, [pc, #200]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 80008d0:	400b      	ands	r3, r1
 80008d2:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOB_CRH, ((pin * 4) - 3));
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	0092      	lsls	r2, r2, #2
 80008dc:	3a03      	subs	r2, #3
 80008de:	2101      	movs	r1, #1
 80008e0:	fa01 f202 	lsl.w	r2, r1, r2
 80008e4:	43d2      	mvns	r2, r2
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a2b      	ldr	r2, [pc, #172]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 80008ea:	400b      	ands	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |= (Direction << (4 * (pin - 8)));
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	7979      	ldrb	r1, [r7, #5]
 80008f4:	79ba      	ldrb	r2, [r7, #6]
 80008f6:	3a08      	subs	r2, #8
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	4611      	mov	r1, r2
 8000900:	4a25      	ldr	r2, [pc, #148]	; (8000998 <DIO_voidSetPinDirection+0x2c4>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6013      	str	r3, [r2, #0]
		break;
 8000906:	e08b      	b.n	8000a20 <DIO_voidSetPinDirection+0x34c>
		if(pin >= 0 && pin < 8){
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b07      	cmp	r3, #7
 800090c:	d848      	bhi.n	80009a0 <DIO_voidSetPinDirection+0x2cc>
			CLR_BIT(GPIOC_CRL, (pin * 4));
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	2101      	movs	r1, #1
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	43d2      	mvns	r2, r2
 800091e:	4611      	mov	r1, r2
 8000920:	4a1e      	ldr	r2, [pc, #120]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 8000922:	400b      	ands	r3, r1
 8000924:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOC_CRL, ((pin * 4) - 1));
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	79ba      	ldrb	r2, [r7, #6]
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	3a01      	subs	r2, #1
 8000930:	2101      	movs	r1, #1
 8000932:	fa01 f202 	lsl.w	r2, r1, r2
 8000936:	43d2      	mvns	r2, r2
 8000938:	4611      	mov	r1, r2
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 800093c:	400b      	ands	r3, r1
 800093e:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOC_CRL, ((pin * 4) - 2));
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	3a02      	subs	r2, #2
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	43d2      	mvns	r2, r2
 8000952:	4611      	mov	r1, r2
 8000954:	4a11      	ldr	r2, [pc, #68]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 8000956:	400b      	ands	r3, r1
 8000958:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOC_CRL, ((pin * 4) - 3));
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	79ba      	ldrb	r2, [r7, #6]
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	3a03      	subs	r2, #3
 8000964:	2101      	movs	r1, #1
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	43d2      	mvns	r2, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 8000970:	400b      	ands	r3, r1
 8000972:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |= (Direction << (4 * pin));
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	7979      	ldrb	r1, [r7, #5]
 800097a:	79ba      	ldrb	r2, [r7, #6]
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <DIO_voidSetPinDirection+0x2c8>)
 8000986:	430b      	orrs	r3, r1
 8000988:	6013      	str	r3, [r2, #0]
		break;
 800098a:	e048      	b.n	8000a1e <DIO_voidSetPinDirection+0x34a>
 800098c:	40010800 	.word	0x40010800
 8000990:	40010804 	.word	0x40010804
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40010c04 	.word	0x40010c04
 800099c:	40011000 	.word	0x40011000
			CLR_BIT(GPIOC_CRH, (pin * 4));
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	2101      	movs	r1, #1
 80009aa:	fa01 f202 	lsl.w	r2, r1, r2
 80009ae:	43d2      	mvns	r2, r2
 80009b0:	4611      	mov	r1, r2
 80009b2:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 80009b4:	400b      	ands	r3, r1
 80009b6:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOC_CRH, ((pin * 4) - 1));
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	79ba      	ldrb	r2, [r7, #6]
 80009be:	0092      	lsls	r2, r2, #2
 80009c0:	3a01      	subs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	fa01 f202 	lsl.w	r2, r1, r2
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 80009ce:	400b      	ands	r3, r1
 80009d0:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOC_CRH, ((pin * 4) - 2));
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	79ba      	ldrb	r2, [r7, #6]
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	3a02      	subs	r2, #2
 80009dc:	2101      	movs	r1, #1
 80009de:	fa01 f202 	lsl.w	r2, r1, r2
 80009e2:	43d2      	mvns	r2, r2
 80009e4:	4611      	mov	r1, r2
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 80009e8:	400b      	ands	r3, r1
 80009ea:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOC_CRH, ((pin * 4) - 3));
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	79ba      	ldrb	r2, [r7, #6]
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	3a03      	subs	r2, #3
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	4611      	mov	r1, r2
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 8000a02:	400b      	ands	r3, r1
 8000a04:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |= (Direction << (4 * (pin - 8)));
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	7979      	ldrb	r1, [r7, #5]
 8000a0c:	79ba      	ldrb	r2, [r7, #6]
 8000a0e:	3a08      	subs	r2, #8
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	4611      	mov	r1, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <DIO_voidSetPinDirection+0x358>)
 8000a1a:	430b      	orrs	r3, r1
 8000a1c:	6013      	str	r3, [r2, #0]
		break;
 8000a1e:	bf00      	nop
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40011004 	.word	0x40011004

08000a30 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 port, u8 pin, u8 Value){
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71bb      	strb	r3, [r7, #6]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	717b      	strb	r3, [r7, #5]
	switch(port){
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d040      	beq.n	8000aca <DIO_voidSetPinValue+0x9a>
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	dc60      	bgt.n	8000b0e <DIO_voidSetPinValue+0xde>
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <DIO_voidSetPinValue+0x26>
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d01d      	beq.n	8000a90 <DIO_voidSetPinValue+0x60>
			CLR_BIT(GPIOC_ODR, pin);
			break;
		}
		break;
	}
}
 8000a54:	e05b      	b.n	8000b0e <DIO_voidSetPinValue+0xde>
		switch(Value){
 8000a56:	797b      	ldrb	r3, [r7, #5]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00c      	beq.n	8000a76 <DIO_voidSetPinValue+0x46>
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d151      	bne.n	8000b04 <DIO_voidSetPinValue+0xd4>
			SET_BIT(GPIOA_ODR, pin);
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <DIO_voidSetPinValue+0xe8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	2101      	movs	r1, #1
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <DIO_voidSetPinValue+0xe8>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
			break;
 8000a74:	e00b      	b.n	8000a8e <DIO_voidSetPinValue+0x5e>
			CLR_BIT(GPIOA_ODR, pin);
 8000a76:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <DIO_voidSetPinValue+0xe8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	79ba      	ldrb	r2, [r7, #6]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	43d2      	mvns	r2, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <DIO_voidSetPinValue+0xe8>)
 8000a88:	400b      	ands	r3, r1
 8000a8a:	6013      	str	r3, [r2, #0]
			break;
 8000a8c:	bf00      	nop
		break;
 8000a8e:	e039      	b.n	8000b04 <DIO_voidSetPinValue+0xd4>
		switch(Value){
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00c      	beq.n	8000ab0 <DIO_voidSetPinValue+0x80>
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d136      	bne.n	8000b08 <DIO_voidSetPinValue+0xd8>
			SET_BIT(GPIOB_ODR, pin);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <DIO_voidSetPinValue+0xec>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	79ba      	ldrb	r2, [r7, #6]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <DIO_voidSetPinValue+0xec>)
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	6013      	str	r3, [r2, #0]
			break;
 8000aae:	e00b      	b.n	8000ac8 <DIO_voidSetPinValue+0x98>
			CLR_BIT(GPIOB_ODR, pin);
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <DIO_voidSetPinValue+0xec>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	79ba      	ldrb	r2, [r7, #6]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <DIO_voidSetPinValue+0xec>)
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	6013      	str	r3, [r2, #0]
			break;
 8000ac6:	bf00      	nop
		break;
 8000ac8:	e01e      	b.n	8000b08 <DIO_voidSetPinValue+0xd8>
		switch(Value){
 8000aca:	797b      	ldrb	r3, [r7, #5]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00c      	beq.n	8000aea <DIO_voidSetPinValue+0xba>
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d11b      	bne.n	8000b0c <DIO_voidSetPinValue+0xdc>
			SET_BIT(GPIOC_ODR, pin);
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <DIO_voidSetPinValue+0xf0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <DIO_voidSetPinValue+0xf0>)
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6013      	str	r3, [r2, #0]
			break;
 8000ae8:	e00b      	b.n	8000b02 <DIO_voidSetPinValue+0xd2>
			CLR_BIT(GPIOC_ODR, pin);
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <DIO_voidSetPinValue+0xf0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	79ba      	ldrb	r2, [r7, #6]
 8000af0:	2101      	movs	r1, #1
 8000af2:	fa01 f202 	lsl.w	r2, r1, r2
 8000af6:	43d2      	mvns	r2, r2
 8000af8:	4611      	mov	r1, r2
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <DIO_voidSetPinValue+0xf0>)
 8000afc:	400b      	ands	r3, r1
 8000afe:	6013      	str	r3, [r2, #0]
			break;
 8000b00:	bf00      	nop
		break;
 8000b02:	e003      	b.n	8000b0c <DIO_voidSetPinValue+0xdc>
		break;
 8000b04:	bf00      	nop
 8000b06:	e002      	b.n	8000b0e <DIO_voidSetPinValue+0xde>
		break;
 8000b08:	bf00      	nop
 8000b0a:	e000      	b.n	8000b0e <DIO_voidSetPinValue+0xde>
		break;
 8000b0c:	bf00      	nop
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	4001080c 	.word	0x4001080c
 8000b1c:	40010c0c 	.word	0x40010c0c
 8000b20:	4001100c 	.word	0x4001100c

08000b24 <WWDG_IRQHandler>:
#include "GPIO_interface.h"
#include "LCD.h"
#include "delay.h"
#include "NVIC.h"

void WWDG_IRQHandler(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
	uint8 str[] = {'W', 'D', 'G', ' ', 'S', 'T', 'A', 'R', 'T'};
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <WWDG_IRQHandler+0x5c>)
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b32:	c303      	stmia	r3!, {r0, r1}
 8000b34:	701a      	strb	r2, [r3, #0]
	LCD_SendString1(0, 1, 9,  str);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2209      	movs	r2, #9
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f89b 	bl	8000c7a <LCD_SendString1>
	DNVIC_SetPendingIRQ(ADC3);
 8000b44:	202f      	movs	r0, #47	; 0x2f
 8000b46:	f000 f9bd 	bl	8000ec4 <DNVIC_SetPendingIRQ>
	_delay_ms(5000);
 8000b4a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b4e:	f7ff fd8d 	bl	800066c <_delay_ms>
	uint8 str1[] = {'W', 'D', 'G', ' ', 'E', 'N', 'D'};
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <WWDG_IRQHandler+0x60>)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5a:	6018      	str	r0, [r3, #0]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	8019      	strh	r1, [r3, #0]
 8000b60:	3302      	adds	r3, #2
 8000b62:	0c0a      	lsrs	r2, r1, #16
 8000b64:	701a      	strb	r2, [r3, #0]
	LCD_SendString1(2, 1, 7,  str1);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2207      	movs	r2, #7
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f000 f884 	bl	8000c7a <LCD_SendString1>
	DNVIC_ClearPendingIRQ(WWDG);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f9f4 	bl	8000f60 <DNVIC_ClearPendingIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	080013d4 	.word	0x080013d4
 8000b84:	080013e0 	.word	0x080013e0

08000b88 <ADC3_IRQHandler>:

void ADC3_IRQHandler(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	DIO_voidSetPinDirection(PORTA, PIN7, GPIO_OUTPUT_10MHZ_PP);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2107      	movs	r1, #7
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff fd9f 	bl	80006d4 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA, PIN7, GPIO_HIGH);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2107      	movs	r1, #7
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff ff48 	bl	8000a30 <DIO_voidSetPinValue>
	DNVIC_ClearPendingIRQ(ADC3);
 8000ba0:	202f      	movs	r0, #47	; 0x2f
 8000ba2:	f000 f9dd 	bl	8000f60 <DNVIC_ClearPendingIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <LCD_Init>:
void LCD_SendData(uint8 character);
static void write_data(uint8 data);
void SET_PIN();

void LCD_Init(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
	/* Add your code here */
	/* Initialize Pins */

	DIO_voidSetPinDirection(LCD_PORT, LCD_PIN0, GPIO_OUTPUT_10MHZ_PP);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fd8d 	bl	80006d4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PORT, LCD_PIN1, GPIO_OUTPUT_10MHZ_PP);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fd88 	bl	80006d4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PORT, LCD_PIN2, GPIO_OUTPUT_10MHZ_PP);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff fd83 	bl	80006d4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PORT, LCD_PIN3, GPIO_OUTPUT_10MHZ_PP);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fd7e 	bl	80006d4 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(FLAG_PORT, RS_PIN, GPIO_OUTPUT_10MHZ_PP);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2107      	movs	r1, #7
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fd79 	bl	80006d4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(FLAG_PORT, EN_PIN, GPIO_OUTPUT_10MHZ_PP);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2106      	movs	r1, #6
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fd74 	bl	80006d4 <DIO_voidSetPinDirection>
	_delay_ms(15);
 8000bec:	200f      	movs	r0, #15
 8000bee:	f7ff fd3d 	bl	800066c <_delay_ms>
	/* Initialization sequence */
	LCD_SendCommand(0x2);
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f000 f867 	bl	8000cc6 <LCD_SendCommand>
	_delay_ms(15);
 8000bf8:	200f      	movs	r0, #15
 8000bfa:	f7ff fd37 	bl	800066c <_delay_ms>
	LCD_SendCommand(0x02);
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 f861 	bl	8000cc6 <LCD_SendCommand>
	_delay_ms(15);
 8000c04:	200f      	movs	r0, #15
 8000c06:	f7ff fd31 	bl	800066c <_delay_ms>
	/* Initial LCD commands */
	/* Select data length = 8 bits, 2 lines LCD and small font */
	uint8 comd = LCD_FUNCTION_SET | LCD_DATA_LENGTH_4 | LCD_TWO_LINES | LCD_SMALL_FONT;
 8000c0a:	2328      	movs	r3, #40	; 0x28
 8000c0c:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(comd);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f858 	bl	8000cc6 <LCD_SendCommand>
	_delay_ms(15);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f7ff fd28 	bl	800066c <_delay_ms>
	/* Turn display , cursor and blinking OFF */
	comd = LCD_DISPLAY_ON | LCD_CURSOR_ON  | LCD_CURSOR_BLINK_OFF | LCD_DISPLAY_CONTROL;
 8000c1c:	230e      	movs	r3, #14
 8000c1e:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(comd);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f84f 	bl	8000cc6 <LCD_SendCommand>
	_delay_ms(15);
 8000c28:	200f      	movs	r0, #15
 8000c2a:	f7ff fd1f 	bl	800066c <_delay_ms>
	/* Increment cursor and turn off display shift */
	comd = LCD_INCREMENT_CURSOR | LCD_DISPLAY_SHIFT_OFF | LCD_SET_ENTRY_MODE ;
 8000c2e:	2342      	movs	r3, #66	; 0x42
 8000c30:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(comd);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f846 	bl	8000cc6 <LCD_SendCommand>
	_delay_ms(15);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f7ff fd16 	bl	800066c <_delay_ms>
	/* Clear display */
	comd = LCD_CLR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(comd);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f83d 	bl	8000cc6 <LCD_SendCommand>
	_delay_ms(15);
 8000c4c:	200f      	movs	r0, #15
 8000c4e:	f7ff fd0d 	bl	800066c <_delay_ms>

	/* End of your code !*/
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <LCD_clear>:

void LCD_clear(){
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
	uint8 comd = LCD_CLR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(comd);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f82d 	bl	8000cc6 <LCD_SendCommand>
	_delay_ms(10);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f7ff fcfd 	bl	800066c <_delay_ms>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <LCD_SendString1>:

	/* End of your code !*/

}

void LCD_SendString1(uint8 line, uint8 col, uint8 len, uint8 * str){
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	460b      	mov	r3, r1
 8000c88:	71bb      	strb	r3, [r7, #6]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	717b      	strb	r3, [r7, #5]
	LCD_GoTo(line, col);
 8000c8e:	79ba      	ldrb	r2, [r7, #6]
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f8e1 	bl	8000e5c <LCD_GoTo>
	uint8 i = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]

	/* Add your code here */
	/* Clear screen and send character by character to the LCD */
	for( ; i < len; i++){
 8000c9e:	e009      	b.n	8000cb4 <LCD_SendString1+0x3a>
		LCD_SendData(str[i]);
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f8bf 	bl	8000e2c <LCD_SendData>
	for( ; i < len; i++){
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	7bfa      	ldrb	r2, [r7, #15]
 8000cb6:	797b      	ldrb	r3, [r7, #5]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3f1      	bcc.n	8000ca0 <LCD_SendString1+0x26>
	}
	/* End of your code !*/
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <LCD_SendCommand>:
	}
	/* End of your code !*/
}

static void LCD_SendCommand(uint8 command)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
	/* Add your code here */
	SET_PIN();
 8000cd0:	f000 f894 	bl	8000dfc <SET_PIN>
	_delay_ms(10);
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f7ff fcc9 	bl	800066c <_delay_ms>
	DIO_voidSetPinValue(FLAG_PORT, RS_PIN, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2107      	movs	r1, #7
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff fea6 	bl	8000a30 <DIO_voidSetPinValue>
	write_data(command);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f804 	bl	8000cf4 <write_data>
	/* End of your code !*/

}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <write_data>:
static void write_data(uint8 data){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	uint8 low = data & 0x0F;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	73fb      	strb	r3, [r7, #15]
	uint8 high = (data >> 4) & 0x0F;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	73bb      	strb	r3, [r7, #14]
	//setpinvalue(FLAG_PORT, EN_PIN, 1);
	//_delay_ms(20);
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN0, (high & 1));
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	461a      	mov	r2, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff fe89 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN1, ((high >> 1) & 1));
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	085b      	lsrs	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fe7e 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN2, ((high >> 2) & 1));
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	2102      	movs	r1, #2
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff fe73 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN3, ((high >> 3) & 1));
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff fe68 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(FLAG_PORT, EN_PIN, 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2106      	movs	r1, #6
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff fe63 	bl	8000a30 <DIO_voidSetPinValue>
	_delay_ms(10);
 8000d6a:	200a      	movs	r0, #10
 8000d6c:	f7ff fc7e 	bl	800066c <_delay_ms>
	DIO_voidSetPinValue(FLAG_PORT, EN_PIN, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2106      	movs	r1, #6
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fe5b 	bl	8000a30 <DIO_voidSetPinValue>
	_delay_ms(10);
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	f7ff fc76 	bl	800066c <_delay_ms>

	//setpinvalue(FLAG_PORT, EN_PIN, 1);
	//_delay_ms(20);
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN0, (low & 1));
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fe4f 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN1, ((low >> 1) & 1));
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	085b      	lsrs	r3, r3, #1
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	2101      	movs	r1, #1
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fe44 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN2, ((low >> 2) & 1));
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	2102      	movs	r1, #2
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fe39 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN3, ((low >> 3) & 1));
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff fe2e 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(FLAG_PORT, EN_PIN, 1);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2106      	movs	r1, #6
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff fe29 	bl	8000a30 <DIO_voidSetPinValue>
	_delay_ms(10);
 8000dde:	200a      	movs	r0, #10
 8000de0:	f7ff fc44 	bl	800066c <_delay_ms>
	DIO_voidSetPinValue(FLAG_PORT, EN_PIN, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2106      	movs	r1, #6
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fe21 	bl	8000a30 <DIO_voidSetPinValue>
	_delay_ms(10);
 8000dee:	200a      	movs	r0, #10
 8000df0:	f7ff fc3c 	bl	800066c <_delay_ms>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <SET_PIN>:

void SET_PIN(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fe13 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN1, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff fe0e 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN2, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2102      	movs	r1, #2
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fe09 	bl	8000a30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT, LCD_PIN3, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2103      	movs	r1, #3
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff fe04 	bl	8000a30 <DIO_voidSetPinValue>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LCD_SendData>:

void LCD_SendData(uint8 character)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	/* Add your code here */
	SET_PIN();
 8000e36:	f7ff ffe1 	bl	8000dfc <SET_PIN>
	_delay_ms(10);
 8000e3a:	200a      	movs	r0, #10
 8000e3c:	f7ff fc16 	bl	800066c <_delay_ms>
	DIO_voidSetPinValue(FLAG_PORT, RS_PIN, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2107      	movs	r1, #7
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff fdf3 	bl	8000a30 <DIO_voidSetPinValue>
	write_data(character);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff51 	bl	8000cf4 <write_data>
	/* End of your code !*/
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <LCD_GoTo>:

void LCD_GoTo(uint8 line, uint8 column)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	460a      	mov	r2, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]

	uint8 address = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
	/* Calculate address in DDRAM */
	switch(line){
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d819      	bhi.n	8000eaa <LCD_GoTo+0x4e>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <LCD_GoTo+0x20>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000e93 	.word	0x08000e93
 8000e84:	08000e9b 	.word	0x08000e9b
 8000e88:	08000ea3 	.word	0x08000ea3
	case 0:
		address = line1_add + column;
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e90:	e00b      	b.n	8000eaa <LCD_GoTo+0x4e>
	case 1:
		address = line2_add + column;
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	3340      	adds	r3, #64	; 0x40
 8000e96:	73fb      	strb	r3, [r7, #15]
		break;
 8000e98:	e007      	b.n	8000eaa <LCD_GoTo+0x4e>
	case 2:
		address = line3_add + column;
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	3314      	adds	r3, #20
 8000e9e:	73fb      	strb	r3, [r7, #15]
		break;
 8000ea0:	e003      	b.n	8000eaa <LCD_GoTo+0x4e>
	case 3:
		address = line4_add + column;
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	3354      	adds	r3, #84	; 0x54
 8000ea6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ea8:	bf00      	nop
	}

	uint8 comd = address | LCD_SET_DDRAM_ADDRESS;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb0:	73bb      	strb	r3, [r7, #14]

	/* Send address to LCD */

	LCD_SendCommand(comd);
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff06 	bl	8000cc6 <LCD_SendCommand>

	/* End of your code !*/


}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop

08000ec4 <DNVIC_SetPendingIRQ>:
	}
	return ES_OK;
}

u8 DNVIC_SetPendingIRQ (u8 IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	if (IRQn>=0 && IRQn<=31 ){
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b1f      	cmp	r3, #31
 8000ed2:	d80e      	bhi.n	8000ef2 <DNVIC_SetPendingIRQ+0x2e>
		SET_BIT(NV->ISPR[0],IRQn);
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <DNVIC_SetPendingIRQ+0x98>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <DNVIC_SetPendingIRQ+0x98>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000ef0:	e02d      	b.n	8000f4e <DNVIC_SetPendingIRQ+0x8a>
	}
	else if (IRQn>=32 && IRQn<=63 ){
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b1f      	cmp	r3, #31
 8000ef6:	d912      	bls.n	8000f1e <DNVIC_SetPendingIRQ+0x5a>
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b3f      	cmp	r3, #63	; 0x3f
 8000efc:	d80f      	bhi.n	8000f1e <DNVIC_SetPendingIRQ+0x5a>
		SET_BIT(NV->ISPR[1],(IRQn-32));
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <DNVIC_SetPendingIRQ+0x98>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3b20      	subs	r3, #32
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <DNVIC_SetPendingIRQ+0x98>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000f1c:	e017      	b.n	8000f4e <DNVIC_SetPendingIRQ+0x8a>
	}
	else if (IRQn>=64 && IRQn<=67 ){
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b3f      	cmp	r3, #63	; 0x3f
 8000f22:	d912      	bls.n	8000f4a <DNVIC_SetPendingIRQ+0x86>
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b43      	cmp	r3, #67	; 0x43
 8000f28:	d80f      	bhi.n	8000f4a <DNVIC_SetPendingIRQ+0x86>
		SET_BIT(NV->ISPR[2],(IRQn-64));
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <DNVIC_SetPendingIRQ+0x98>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	3b40      	subs	r3, #64	; 0x40
 8000f36:	2101      	movs	r1, #1
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <DNVIC_SetPendingIRQ+0x98>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000f48:	e001      	b.n	8000f4e <DNVIC_SetPendingIRQ+0x8a>
	}
	else{
		return ES_NOK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <DNVIC_SetPendingIRQ+0x8c>
	}
	return ES_OK;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000000 	.word	0x20000000

08000f60 <DNVIC_ClearPendingIRQ>:

u8 DNVIC_ClearPendingIRQ (u8 IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	if (IRQn>=0 && IRQn<=31 ){
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b1f      	cmp	r3, #31
 8000f6e:	d80e      	bhi.n	8000f8e <DNVIC_ClearPendingIRQ+0x2e>
		SET_BIT(NV->ICPR[0],IRQn);
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <DNVIC_ClearPendingIRQ+0x98>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4619      	mov	r1, r3
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <DNVIC_ClearPendingIRQ+0x98>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8000f8c:	e02d      	b.n	8000fea <DNVIC_ClearPendingIRQ+0x8a>
	}
	else if (IRQn>=32 && IRQn<=63 ){
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b1f      	cmp	r3, #31
 8000f92:	d912      	bls.n	8000fba <DNVIC_ClearPendingIRQ+0x5a>
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b3f      	cmp	r3, #63	; 0x3f
 8000f98:	d80f      	bhi.n	8000fba <DNVIC_ClearPendingIRQ+0x5a>
		SET_BIT(NV->ICPR[1],(IRQn-32));
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <DNVIC_ClearPendingIRQ+0x98>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	3b20      	subs	r3, #32
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4619      	mov	r1, r3
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <DNVIC_ClearPendingIRQ+0x98>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8000fb8:	e017      	b.n	8000fea <DNVIC_ClearPendingIRQ+0x8a>
	}
	else if (IRQn>=64 && IRQn<=67 ){
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b3f      	cmp	r3, #63	; 0x3f
 8000fbe:	d912      	bls.n	8000fe6 <DNVIC_ClearPendingIRQ+0x86>
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b43      	cmp	r3, #67	; 0x43
 8000fc4:	d80f      	bhi.n	8000fe6 <DNVIC_ClearPendingIRQ+0x86>
		SET_BIT(NV->ICPR[2],(IRQn-64));
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <DNVIC_ClearPendingIRQ+0x98>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	3b40      	subs	r3, #64	; 0x40
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <DNVIC_ClearPendingIRQ+0x98>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 8000fe4:	e001      	b.n	8000fea <DNVIC_ClearPendingIRQ+0x8a>
	}
	else{
		return ES_NOK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <DNVIC_ClearPendingIRQ+0x8c>
	}
	return ES_OK;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000000 	.word	0x20000000

08000ffc <MRCC_voidInit>:
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/

void MRCC_voidInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
		#if 	CLOCK_TYPE == HSI
		/* internal 8 MHZ RC oscillator 			*/
		/*	HSI clock enable						*/
		MRCC->CR = MRCC->CR |  (1 << HSION);
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <MRCC_voidInit+0x3c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <MRCC_voidInit+0x3c>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]
				
		/*HSI selected as system clock		*/
		MRCC->CFGR = MRCC->CFGR | sys_HSI;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MRCC_voidInit+0x3c>)
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <MRCC_voidInit+0x3c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	6053      	str	r3, [r2, #4]
				

		/*	HSI Ready Flag					*/
		while(!GET_BIT(MRCC->CR, HSIRDY));
 8001014:	bf00      	nop
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MRCC_voidInit+0x3c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f9      	beq.n	8001016 <MRCC_voidInit+0x1a>
			#error		"Wrong Clock System type congiguration!"
		
		#endif
		/*FOR Clock Security System				*/
		#if		CLOCK_SECURITY_SYSTEM	==	OFF
				CLR_BIT(MRCC->CR, CSSON);
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <MRCC_voidInit+0x3c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <MRCC_voidInit+0x3c>)
 8001028:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800102c:	6013      	str	r3, [r2, #0]
				
		#else
				#warning	"Wrong clock security system configuration choice!"
		#endif
		
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <MRCC_enumSetPeripheralClock>:

ErrorStatus MRCC_enumSetPeripheralClock(u8 Copy_u8PeripheralBus , u8 Copy_u8PeripheralName , u8 Copy_u8PeripheralState )
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	460b      	mov	r3, r1
 8001048:	71bb      	strb	r3, [r7, #6]
 800104a:	4613      	mov	r3, r2
 800104c:	717b      	strb	r3, [r7, #5]
	ErrorStatus	LOC_enumstate = ES_OK ;
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
	switch( Copy_u8PeripheralState )
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d063      	beq.n	8001120 <MRCC_enumSetPeripheralClock+0xe4>
 8001058:	2b03      	cmp	r3, #3
 800105a:	dc7e      	bgt.n	800115a <MRCC_enumSetPeripheralClock+0x11e>
 800105c:	2b01      	cmp	r3, #1
 800105e:	d002      	beq.n	8001066 <MRCC_enumSetPeripheralClock+0x2a>
 8001060:	2b02      	cmp	r3, #2
 8001062:	d02d      	beq.n	80010c0 <MRCC_enumSetPeripheralClock+0x84>
 8001064:	e079      	b.n	800115a <MRCC_enumSetPeripheralClock+0x11e>
	{
		case	RCC_ENABLE 	:
							switch( Copy_u8PeripheralBus )
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b03      	cmp	r3, #3
 800106a:	d01c      	beq.n	80010a6 <MRCC_enumSetPeripheralClock+0x6a>
 800106c:	2b03      	cmp	r3, #3
 800106e:	dc25      	bgt.n	80010bc <MRCC_enumSetPeripheralClock+0x80>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d002      	beq.n	800107a <MRCC_enumSetPeripheralClock+0x3e>
 8001074:	2b02      	cmp	r3, #2
 8001076:	d00b      	beq.n	8001090 <MRCC_enumSetPeripheralClock+0x54>
							{	
								case AHB  :	SET_BIT(MRCC->AHBENR, Copy_u8PeripheralName);break;
								case APB1 :	SET_BIT(MRCC->APB1ENR,Copy_u8PeripheralName);break;
								case APB2 : SET_BIT(MRCC->APB2ENR,Copy_u8PeripheralName);break;
								default	  :	break;
 8001078:	e020      	b.n	80010bc <MRCC_enumSetPeripheralClock+0x80>
								case AHB  :	SET_BIT(MRCC->AHBENR, Copy_u8PeripheralName);break;
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	79ba      	ldrb	r2, [r7, #6]
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	4611      	mov	r1, r2
 8001088:	4a37      	ldr	r2, [pc, #220]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 800108a:	430b      	orrs	r3, r1
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	e016      	b.n	80010be <MRCC_enumSetPeripheralClock+0x82>
								case APB1 :	SET_BIT(MRCC->APB1ENR,Copy_u8PeripheralName);break;
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	79ba      	ldrb	r2, [r7, #6]
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	4611      	mov	r1, r2
 800109e:	4a32      	ldr	r2, [pc, #200]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 80010a0:	430b      	orrs	r3, r1
 80010a2:	61d3      	str	r3, [r2, #28]
 80010a4:	e00b      	b.n	80010be <MRCC_enumSetPeripheralClock+0x82>
								case APB2 : SET_BIT(MRCC->APB2ENR,Copy_u8PeripheralName);break;
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	79ba      	ldrb	r2, [r7, #6]
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 80010b6:	430b      	orrs	r3, r1
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	e000      	b.n	80010be <MRCC_enumSetPeripheralClock+0x82>
								default	  :	break;
 80010bc:	bf00      	nop
							}
							break;
 80010be:	e04c      	b.n	800115a <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_DISABLE :	
							switch( Copy_u8PeripheralBus )
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d01e      	beq.n	8001104 <MRCC_enumSetPeripheralClock+0xc8>
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	dc28      	bgt.n	800111c <MRCC_enumSetPeripheralClock+0xe0>
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d002      	beq.n	80010d4 <MRCC_enumSetPeripheralClock+0x98>
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d00c      	beq.n	80010ec <MRCC_enumSetPeripheralClock+0xb0>
								case APB1 :	CLR_BIT(MRCC->APB1ENR,Copy_u8PeripheralName);
								break;
								case APB2 : CLR_BIT(MRCC->APB2ENR,Copy_u8PeripheralName);
								break;
								default	  :	
								break;
 80010d2:	e023      	b.n	800111c <MRCC_enumSetPeripheralClock+0xe0>
								case AHB  :	CLR_BIT(MRCC->AHBENR, Copy_u8PeripheralName);
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	79ba      	ldrb	r2, [r7, #6]
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f202 	lsl.w	r2, r1, r2
 80010e0:	43d2      	mvns	r2, r2
 80010e2:	4611      	mov	r1, r2
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 80010e6:	400b      	ands	r3, r1
 80010e8:	6153      	str	r3, [r2, #20]
								break;
 80010ea:	e018      	b.n	800111e <MRCC_enumSetPeripheralClock+0xe2>
								case APB1 :	CLR_BIT(MRCC->APB1ENR,Copy_u8PeripheralName);
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	43d2      	mvns	r2, r2
 80010fa:	4611      	mov	r1, r2
 80010fc:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 80010fe:	400b      	ands	r3, r1
 8001100:	61d3      	str	r3, [r2, #28]
								break;
 8001102:	e00c      	b.n	800111e <MRCC_enumSetPeripheralClock+0xe2>
								case APB2 : CLR_BIT(MRCC->APB2ENR,Copy_u8PeripheralName);
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	79ba      	ldrb	r2, [r7, #6]
 800110a:	2101      	movs	r1, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	43d2      	mvns	r2, r2
 8001112:	4611      	mov	r1, r2
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 8001116:	400b      	ands	r3, r1
 8001118:	6193      	str	r3, [r2, #24]
								break;
 800111a:	e000      	b.n	800111e <MRCC_enumSetPeripheralClock+0xe2>
								break;
 800111c:	bf00      	nop
							}
							break;
 800111e:	e01c      	b.n	800115a <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_RESET	:	
							switch( Copy_u8PeripheralBus )
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d002      	beq.n	800112c <MRCC_enumSetPeripheralClock+0xf0>
 8001126:	2b03      	cmp	r3, #3
 8001128:	d00b      	beq.n	8001142 <MRCC_enumSetPeripheralClock+0x106>
							{	
								case APB1 :	SET_BIT(MRCC->APB1RSTR,Copy_u8PeripheralName);break;
								case APB2 : SET_BIT(MRCC->APB2RSTR,Copy_u8PeripheralName);break;
								default	  :	break;
 800112a:	e015      	b.n	8001158 <MRCC_enumSetPeripheralClock+0x11c>
								case APB1 :	SET_BIT(MRCC->APB1RSTR,Copy_u8PeripheralName);break;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	79ba      	ldrb	r2, [r7, #6]
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 800113c:	430b      	orrs	r3, r1
 800113e:	6113      	str	r3, [r2, #16]
 8001140:	e00a      	b.n	8001158 <MRCC_enumSetPeripheralClock+0x11c>
								case APB2 : SET_BIT(MRCC->APB2RSTR,Copy_u8PeripheralName);break;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	79ba      	ldrb	r2, [r7, #6]
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	4611      	mov	r1, r2
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <MRCC_enumSetPeripheralClock+0x12c>)
 8001152:	430b      	orrs	r3, r1
 8001154:	60d3      	str	r3, [r2, #12]
 8001156:	bf00      	nop
							}
							break;
 8001158:	bf00      	nop
	}
	return LOC_enumstate;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <SYSTICK_Init>:
systickcbf_t APPcbf ;
u8 flag = 1;
u8 counter = 0;

uint8_t SYSTICK_Init (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	/* CLK source and interrupt enable */
	SET_BIT(STK_CTRL, CLKSOURCE);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <SYSTICK_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <SYSTICK_Init+0x28>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6013      	str	r3, [r2, #0]
	SET_BIT(STK_CTRL, TICKINT);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SYSTICK_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <SYSTICK_Init+0x28>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	6013      	str	r3, [r2, #0]
	return OK;
 8001188:	2300      	movs	r3, #0

}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <SYSTICK_Start>:
uint8_t SYSTICK_Start (void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	/* enable counter */
	SET_BIT(STK_CTRL, ENABLE);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SYSTICK_Start+0x1c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <SYSTICK_Start+0x1c>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]
	return OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <SYSTICK_SetCallback>:
	/* disable counter */
	CLR_BIT(STK_CTRL, ENABLE);
	return OK;
}
uint8_t SYSTICK_SetCallback (systickcbf_t cbf)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	/* callback function */
	APPcbf = cbf;
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <SYSTICK_SetCallback+0x1c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
	return OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000024 	.word	0x20000024

080011d8 <SYSTICK_SetTime>:
uint8_t SYSTICK_SetTime (u32 timeus,u32 clk)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	/* add value to STK LOAD */ 
	STK_LOAD = timeus * clk;
 80011e2:	4906      	ldr	r1, [pc, #24]	; (80011fc <SYSTICK_SetTime+0x24>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	600b      	str	r3, [r1, #0]
	return OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e014 	.word	0xe000e014

08001200 <SysTick_Handler>:
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	counter++;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <SysTick_Handler+0x30>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <SysTick_Handler+0x30>)
 800120e:	701a      	strb	r2, [r3, #0]
	APPcbf(flag);
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <SysTick_Handler+0x34>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a08      	ldr	r2, [pc, #32]	; (8001238 <SysTick_Handler+0x38>)
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	4610      	mov	r0, r2
 800121a:	4798      	blx	r3
	flag ^= 1;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SysTick_Handler+0x38>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	f083 0301 	eor.w	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Handler+0x38>)
 8001228:	701a      	strb	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000028 	.word	0x20000028
 8001234:	20000024 	.word	0x20000024
 8001238:	20000004 	.word	0x20000004

0800123c <main>:
extern counter;

void toggle_led(u8 val);

int main(void)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
	/* Loop forever */
	MRCC_voidInit();
 8001242:	f7ff fedb 	bl	8000ffc <MRCC_voidInit>
	MRCC_enumSetPeripheralClock(APB2, GPIOA , RCC_ENABLE );
 8001246:	2201      	movs	r2, #1
 8001248:	2102      	movs	r1, #2
 800124a:	2003      	movs	r0, #3
 800124c:	f7ff fef6 	bl	800103c <MRCC_enumSetPeripheralClock>
	MRCC_enumSetPeripheralClock(APB2, GPIOB , RCC_ENABLE );
 8001250:	2201      	movs	r2, #1
 8001252:	2103      	movs	r1, #3
 8001254:	2003      	movs	r0, #3
 8001256:	f7ff fef1 	bl	800103c <MRCC_enumSetPeripheralClock>
	SYSTICK_Init();
 800125a:	f7ff ff87 	bl	800116c <SYSTICK_Init>
	SYSTICK_SetCallback(toggle_led);
 800125e:	4822      	ldr	r0, [pc, #136]	; (80012e8 <main+0xac>)
 8001260:	f7ff ffaa 	bl	80011b8 <SYSTICK_SetCallback>
	SYSTICK_SetTime(1, HSI_CLOCK);
 8001264:	4921      	ldr	r1, [pc, #132]	; (80012ec <main+0xb0>)
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff ffb6 	bl	80011d8 <SYSTICK_SetTime>
	SYSTICK_Start();
 800126c:	f7ff ff94 	bl	8001198 <SYSTICK_Start>
	LCD_Init();
 8001270:	f7ff fc9b 	bl	8000baa <LCD_Init>

	while(1){
	    if(counter == 1){
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <main+0xb4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <main+0x46>
	    	LCD_clear();
 800127c:	f7ff fced 	bl	8000c5a <LCD_clear>
 8001280:	e7f8      	b.n	8001274 <main+0x38>
	    }
	    else if(counter == 5){
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <main+0xb4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d10a      	bne.n	80012a0 <main+0x64>
			uint8 str[] = {'G', '6'};
 800128a:	f243 6347 	movw	r3, #13895	; 0x3647
 800128e:	82bb      	strh	r3, [r7, #20]
			LCD_SendString1(0, 0, 2, str);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2202      	movs	r2, #2
 8001296:	2100      	movs	r1, #0
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fcee 	bl	8000c7a <LCD_SendString1>
 800129e:	e7e9      	b.n	8001274 <main+0x38>
		}
		else if(counter == 6){
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <main+0xb4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b06      	cmp	r3, #6
 80012a6:	d102      	bne.n	80012ae <main+0x72>
			LCD_clear();
 80012a8:	f7ff fcd7 	bl	8000c5a <LCD_clear>
 80012ac:	e7e2      	b.n	8001274 <main+0x38>
		}
		else if(counter == 10){
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <main+0xb4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b0a      	cmp	r3, #10
 80012b4:	d1de      	bne.n	8001274 <main+0x38>
			uint8 str1[] = {'G', '6'};
 80012b6:	f243 6347 	movw	r3, #13895	; 0x3647
 80012ba:	823b      	strh	r3, [r7, #16]
			LCD_SendString1(0, 0, 2, str1);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2202      	movs	r2, #2
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fcd8 	bl	8000c7a <LCD_SendString1>

			uint8 str2[] = {'F', 'R', 'E', 'E', ' ', 'P', 'A', 'L', 'E', 'S', 'T', 'I', 'N', 'E'};
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <main+0xb8>)
 80012cc:	463c      	mov	r4, r7
 80012ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d0:	c407      	stmia	r4!, {r0, r1, r2}
 80012d2:	8023      	strh	r3, [r4, #0]
			LCD_SendString1(2, 0, 16, str2);
 80012d4:	463b      	mov	r3, r7
 80012d6:	2210      	movs	r2, #16
 80012d8:	2100      	movs	r1, #0
 80012da:	2002      	movs	r0, #2
 80012dc:	f7ff fccd 	bl	8000c7a <LCD_SendString1>
			counter = 0;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <main+0xb4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
	    if(counter == 1){
 80012e6:	e7c5      	b.n	8001274 <main+0x38>
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	007a1200 	.word	0x007a1200
 80012f0:	20000028 	.word	0x20000028
 80012f4:	080013e8 	.word	0x080013e8

080012f8 <toggle_led>:
		DNVIC_SetPriority(ADC3, 0);

		DNVIC_SetPendingIRQ(WWDG);
}

void toggle_led(u8 val){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	DIO_voidSetPinDirection(PORTA, PIN7, GPIO_OUTPUT_10MHZ_PP);
 8001302:	2201      	movs	r2, #1
 8001304:	2107      	movs	r1, #7
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff f9e4 	bl	80006d4 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA, PIN7, val);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	461a      	mov	r2, r3
 8001310:	2107      	movs	r1, #7
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fb8c 	bl	8000a30 <DIO_voidSetPinValue>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <LoopForever+0x6>)
  ldr r1, =_edata
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <LoopForever+0xe>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <LoopForever+0x16>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800134e:	f000 f811 	bl	8001374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001352:	f7ff ff73 	bl	800123c <main>

08001356 <LoopForever>:

LoopForever:
  b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   r0, =_estack
 8001358:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001364:	08001400 	.word	0x08001400
  ldr r2, =_sbss
 8001368:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800136c:	2000002c 	.word	0x2000002c

08001370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC1_2_IRQHandler>
	...

08001374 <__libc_init_array>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	2600      	movs	r6, #0
 8001378:	4d0c      	ldr	r5, [pc, #48]	; (80013ac <__libc_init_array+0x38>)
 800137a:	4c0d      	ldr	r4, [pc, #52]	; (80013b0 <__libc_init_array+0x3c>)
 800137c:	1b64      	subs	r4, r4, r5
 800137e:	10a4      	asrs	r4, r4, #2
 8001380:	42a6      	cmp	r6, r4
 8001382:	d109      	bne.n	8001398 <__libc_init_array+0x24>
 8001384:	f000 f81a 	bl	80013bc <_init>
 8001388:	2600      	movs	r6, #0
 800138a:	4d0a      	ldr	r5, [pc, #40]	; (80013b4 <__libc_init_array+0x40>)
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <__libc_init_array+0x44>)
 800138e:	1b64      	subs	r4, r4, r5
 8001390:	10a4      	asrs	r4, r4, #2
 8001392:	42a6      	cmp	r6, r4
 8001394:	d105      	bne.n	80013a2 <__libc_init_array+0x2e>
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	f855 3b04 	ldr.w	r3, [r5], #4
 800139c:	4798      	blx	r3
 800139e:	3601      	adds	r6, #1
 80013a0:	e7ee      	b.n	8001380 <__libc_init_array+0xc>
 80013a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a6:	4798      	blx	r3
 80013a8:	3601      	adds	r6, #1
 80013aa:	e7f2      	b.n	8001392 <__libc_init_array+0x1e>
 80013ac:	080013f8 	.word	0x080013f8
 80013b0:	080013f8 	.word	0x080013f8
 80013b4:	080013f8 	.word	0x080013f8
 80013b8:	080013fc 	.word	0x080013fc

080013bc <_init>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr

080013c8 <_fini>:
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	bf00      	nop
 80013cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ce:	bc08      	pop	{r3}
 80013d0:	469e      	mov	lr, r3
 80013d2:	4770      	bx	lr
